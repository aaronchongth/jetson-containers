#
# this dockerfile roughly follows the 'Install ROS From Source' procedures from:
#   https://docs.ros.org/en/galactic/Installation/Ubuntu-Development-Setup.html
#
ARG BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.5.0
FROM ${BASE_IMAGE}

ARG ROS_PKG=ros_base
ENV ROS_DISTRO=galactic
ENV ROS_ROOT=/opt/ros/${ROS_DISTRO}
ENV ROS_PYTHON_VERSION=3

ENV DEBIAN_FRONTEND=noninteractive
ENV SHELL /bin/bash
SHELL ["/bin/bash", "-c"] 

WORKDIR /tmp

# change the locale from POSIX to UTF-8
RUN locale-gen en_US en_US.UTF-8 && update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
ENV LANG=en_US.UTF-8
ENV PYTHONIOENCODING=utf-8


# 
# add the ROS deb repo to the apt sources list
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
          git \
		cmake \
		build-essential \
		curl \
		wget \
		gnupg2 \
		lsb-release \
		ca-certificates \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/ros2.list > /dev/null


#
# install ROS packages
#
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
		ros-galactic-`echo "${ROS_PKG}" | tr '_' '-'` \
		ros-galactic-launch-xml \
		ros-galactic-launch-yaml \
		ros-galactic-launch-testing \
		ros-galactic-launch-testing-ament-cmake \
		ros-galactic-camera-calibration-parsers \
		ros-galactic-camera-info-manager \
		ros-galactic-cv-bridge \
		ros-galactic-v4l2-camera \
		ros-galactic-vision-msgs \
		ros-galactic-vision-opencv \
		ros-galactic-image-transport \
		ros-galactic-image-tools \
		ros-galactic-image-geometry \
		libpython3-dev \
		python3-colcon-common-extensions \
		python3-rosdep \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get clean

# 
# init/update rosdep
#
RUN apt-get update && \
    cd ${ROS_ROOT} && \
    rosdep init && \
    rosdep update && \
    rm -rf /var/lib/apt/lists/*

# 
# install OpenCV (with CUDA)
#
ARG OPENCV_URL=https://nvidia.box.com/shared/static/2hssa5g3v28ozvo3tc3qwxmn78yerca9.gz
ARG OPENCV_DEB=OpenCV-4.5.0-aarch64.tar.gz

RUN apt-get purge -y '*opencv*' || echo "previous OpenCV installation not found" && \
    mkdir opencv && \
    cd opencv && \
    wget --quiet --show-progress --progress=bar:force:noscroll --no-check-certificate ${OPENCV_URL} -O ${OPENCV_DEB} && \
    tar -xzvf ${OPENCV_DEB} && \
    dpkg -i --force-depends *.deb && \
    apt-get update && \
    apt-get install -y -f --no-install-recommends && \
    dpkg -i *.deb && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get clean && \
    cd ../ && \
    rm -rf opencv && \
    PYTHON3_VERSION=`python3 -c 'import sys; version=sys.version_info[:3]; print("{0}.{1}".format(*version))'` && \
    cp -r /usr/include/opencv4 /usr/local/include/opencv4 && \
    cp -r /usr/lib/python${PYTHON3_VERSION}/dist-packages/cv2 /usr/local/lib/python${PYTHON3_VERSION}/dist-packages/cv2
    
# 
# setup entrypoint
#
COPY ./packages/ros_entrypoint.sh /ros_entrypoint.sh
RUN echo 'source /opt/ros/${ROS_DISTRO}/setup.bash' >> /root/.bashrc
ENTRYPOINT ["/ros_entrypoint.sh"]
CMD ["bash"]
WORKDIR /

# # 
# # upgrade cmake - https://stackoverflow.com/a/56690743
# # this is needed to build some of the ROS2 packages
# #
# RUN apt-get update && \
#     apt-get install -y --no-install-recommends \
# 		  software-properties-common \
# 		  apt-transport-https \
# 		  ca-certificates \
# 		  gnupg \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean
# 		  	  
# RUN wget -qO - https://apt.kitware.com/keys/kitware-archive-latest.asc | apt-key add - && \
#     apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main" && \
#     apt-get update && \
#     apt-get install -y --no-install-recommends --only-upgrade \
#             cmake \
#     && rm -rf /var/lib/apt/lists/* \
#     && apt-get clean
#     
# RUN cmake --version
# 
# # Install galactic from source
# RUN curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg
# 
# RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(source /etc/os-release && echo $UBUNTU_CODENAME) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
# 
# RUN apt-get update && \
#     apt-get install ros-galactic-desktop
# 
# # # 
# # # download/build ROS from source
# # #
# # RUN mkdir -p ${ROS_ROOT}/src && \
# #     cd ${ROS_ROOT} && \
# #     
# #     # https://answers.ros.org/question/325245/minimal-ros2-installation/?answer=325249#post-id-325249
# #     rosinstall_generator --deps --rosdistro ${ROS_DISTRO} ${ROS_PKG} \
# # 		launch_xml \
# # 		launch_yaml \
# # 		launch_testing \
# # 		launch_testing_ament_cmake \
# # 		demo_nodes_cpp \
# # 		demo_nodes_py \
# # 		example_interfaces \
# # 		camera_calibration_parsers \
# # 		camera_info_manager \
# # 		cv_bridge \
# # 		v4l2_camera \
# # 		vision_opencv \
# # 		vision_msgs \
# # 		image_geometry \
# # 		image_pipeline \
# # 		image_transport \
# # 		compressed_image_transport \
# # 		compressed_depth_image_transport \
# # 		> ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
# #     cat ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
# #     vcs import src < ros2.${ROS_DISTRO}.${ROS_PKG}.rosinstall && \
# # 
# #     # install dependencies using rosdep
# #     apt-get update && \
# #     cd ${ROS_ROOT} && \
# #     rosdep init && \
# #     rosdep update && \
# #     rosdep install -y \
# #     	  --ignore-src \
# #        --from-paths src \
# # 	  --rosdistro ${ROS_DISTRO} \
# # 	  --skip-keys "libopencv-dev libopencv-contrib-dev libopencv-imgproc-dev python-opencv python3-opencv" && \
# #     rm -rf /var/lib/apt/lists/* && \
# #     apt-get clean && \
# # 
# #     # build it!
# #     colcon build \
# #         --merge-install \
# #         --cmake-args -DCMAKE_BUILD_TYPE=Release && \
# #     
# #     # remove build files
# #     rm -rf ${ROS_ROOT}/src && \
# #     rm -rf ${ROS_ROOT}/logs && \
# #     rm -rf ${ROS_ROOT}/build && \
# #     rm ${ROS_ROOT}/*.rosinstall
#     
#     
# #
# # fix broken package.xml in test_pluginlib that crops up if/when rosdep is run again
# #
# #   Error(s) in package '/opt/ros/foxy/build/pluginlib/prefix/share/test_pluginlib/package.xml':
# #   Package 'test_pluginlib' must declare at least one maintainer
# #   The package node must contain at least one "license" tag
# #
# #RUN TEST_PLUGINLIB_PACKAGE="${ROS_ROOT}/build/pluginlib/pluginlib_enable_plugin_testing/install/test_pluginlib__test_pluginlib/share/test_pluginlib/package.xml" && \
# #    sed -i '/<\/description>/a <license>BSD<\/license>' $TEST_PLUGINLIB_PACKAGE && \
# #    sed -i '/<\/description>/a <maintainer email="michael@openrobotics.org">Michael Carroll<\/maintainer>' $TEST_PLUGINLIB_PACKAGE && \
# #    cat $TEST_PLUGINLIB_PACKAGE
#     
#     
# #
# # Set the default DDS middleware to cyclonedds
# # https://github.com/ros2/rclcpp/issues/1335
# #
# ENV RMW_IMPLEMENTATION=rmw_cyclonedds_cpp
# 
# 
# # #
# # # setup entrypoint
# # #
# # COPY ./packages/ros_entrypoint.sh /ros_entrypoint.sh
# # 
# # RUN sed -i \
# #     's/ros_env_setup="\/opt\/ros\/$ROS_DISTRO\/setup.bash"/ros_env_setup="${ROS_ROOT}\/install\/setup.bash"/g' \
# #     /ros_entrypoint.sh && \
# #     cat /ros_entrypoint.sh
# 
# # RUN echo 'source ${ROS_ROOT}/install/setup.bash' >> /root/.bashrc
# RUN echo 'source /opt/ros/${ROS_DISTRO}/setup.bash' >> /root/.bashrc
# 
# # ENTRYPOINT ["/ros_entrypoint.sh"]
# CMD ["bash"]
# WORKDIR /
